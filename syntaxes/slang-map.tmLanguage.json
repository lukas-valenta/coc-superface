{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "slang-map",
  "scopeName": "source.slang.map",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#string"
    },
    {
      "include": "#operator"
    },
    {
      "include": "#map-definition"
    },
    {
      "include": "#operation-definition"
    }
  ],
  "repository": {
    "comment": {
      "match": "//.*",
      "name": "comment.line.double-slash.slang.map",
      "comment": "line comment"
    },
    "boolean": {
      "match": "\\b(true|false)\\b",
      "name": "constant.language.slang.map",
      "comment": "boolean constant true and false"
    },
    "number": {
      "match": "[-+]?(0x[0-9a-fA-F]+|0o[0-7]+|0b[0-1]+|[0-9]+(\\.[0-9]+)?)",
      "name": "constant.numeric.slang.map",
      "comment": "number literal with an optional sign and radix prefix"
    },
    "string-escape": {
      "match": "\\\\.",
      "name": "constant.character.escape.slang.map"
    },
    "string": {
      "patterns": [
        {
          "begin": "'''",
          "end": "'''",
          "name": "string.quoted.triple.single.slang.map"
        },
        {
          "begin": "\"\"\"",
          "end": "\"\"\"",
          "name": "string.quoted.triple.double.slang.map"
        },
        {
          "begin": "'",
          "end": "'",
          "name": "string.quoted.single.slang.map",
          "patterns": [
            {
              "include": "#string-escape"
            }
          ]
        },
        {
          "begin": "\"",
          "end": "\"",
          "name": "string.quoted.double.slang.map",
          "patterns": [
            {
              "include": "#string-escape"
            }
          ]
        }
      ],
      "comment": "single- and triple-quoted string with single or double quotes"
    },
    "operator": {
      "name": "keyword.operator.slang.map",
      "match": "(=|,|;|\\.)"
    },
    "identifier": {
      "disabled": 1,
      "match": "[a-zA-Z_][a-zA-Z_0-9]*"
    },
    "jessie": {
      "include": "source.js"
    },
    "object-literal": {
      "begin": "{",
      "end": "}",
      "beginCaptures": {
        "0": {
          "name": "punctuation.brace.open.slang.map"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.brace.close.slang.map"
        }
      },
      "contentName": "meta.expression.object-literal.slang.map",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "comment": "object literal assignment",
          "begin": "(\\S+.*?)\\s*(=)\\s*",
          "end": "((?=})|,|$)",
          "beginCaptures": {
            "1": {
              "name": "variable.other.slang.map",
              "patterns": [
                {
                  "include": "#string"
                },
                {
                  "include": "#operator"
                }
              ]
            },
            "2": {
              "name": "keyword.operator.slang.map"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.operator.slang.map"
            }
          },
          "patterns": [
            {
              "include": "#jessie"
            }
          ],
          "contentName": "meta.expression.jessie.slang.map"
        }
      ]
    },
    "condition-atom": {
      "begin": "\\b(if)\\s*(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.if.slang.map"
        },
        "2": {
          "name": "punctuation.paren.open.slang.map"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.paren.close.slang.map"
        }
      },
      "patterns": [
        {
          "include": "#jessie"
        }
      ],
      "contentName": "meta.expression.jessie.slang.map"
    },
    "iteration-atom": {
      "begin": "\\b(foreach)\\s*(\\()\\s*([a-zA-Z_][a-zA-Z_0-9]*)\\s+(of)\\s+",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.foreach.slang.map"
        },
        "2": {
          "name": "punctuation.paren.open.slang.map"
        },
        "3": {
          "name": "variable.other.slang.map"
        },
        "4": {
          "name": "keyword.operator.of.slang.map"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.paren.close.slang.map"
        }
      },
      "patterns": [
        {
          "include": "#jessie"
        }
      ],
      "contentName": "meta.expression.jessie.slang.map"
    },
    "set-statement-assignment": {
      "begin": "(\\S+.*?)\\s*(=)\\s*",
      "end": "((?=})|;|$)",
      "beginCaptures": {
        "1": {
          "name": "variable.other.slang.map",
          "patterns": [
            {
              "include": "#string"
            },
            {
              "include": "#operator"
            }
          ]
        },
        "2": {
          "name": "keyword.operator.equals.slang.map"
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.operator.semicolon.slang.map"
        }
      },
      "patterns": [
        {
          "include": "#inline-call-statement"
        },
        {
          "include": "#jessie"
        }
      ],
      "contentName": "meta.expression.jessie.slang.map"
    },
    "inline-set-statement": {
      "include": "#set-statement-assignment"
    },
    "set-statement": {
      "begin": "\\b(set)\\b",
      "end": "}",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.set.slang.map"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.brace.close.slang.map"
        }
      },
      "patterns": [
        {
          "include": "#condition-atom"
        },
        {
          "comment": "set statement tail block",
          "begin": "{",
          "end": "(?=})",
          "beginCaptures": {
            "0": {
              "name": "punctuation.brace.open.slang.map"
            }
          },
          "contentName": "meta.statement.set.slang.map",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#set-statement-assignment"
            }
          ]
        }
      ]
    },
    "outcome-statement": {
      "patterns": [
        {
          "comment": "map outcome statement",
          "begin": "\\b(?:(return)\\s+)?(map)\\s+(result|error)\\s+",
          "end": "($)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.return.slang.map"
            },
            "2": {
              "name": "keyword.operator.map.slang.map"
            },
            "3": {
              "name": "variable.language.outcome-target.slang.map"
            }
          },
          "contentName": "meta.statement.outcome.slang.map",
          "patterns": [
            {
              "include": "#condition-atom"
            },
            {
              "include": "#object-literal"
            },
            {
              "include": "#jessie"
            }
          ]
        },
        {
          "comment": "operation outcome statement",
          "begin": "\\b(return|fail)\\b",
          "end": "($)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.return.slang.map"
            }
          },
          "contentName": "meta.statement.outcome.slang.map",
          "patterns": [
            {
              "include": "#condition-atom"
            },
            {
              "include": "#object-literal"
            },
            {
              "include": "#jessie"
            }
          ]
        }
      ]
    },
    "call-statement-head": {
      "comment": "call statement head",
      "begin": "([a-zA-Z_][a-zA-Z_0-9]*)\\s*(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.slang.map"
        },
        "2": {
          "name": "punctuation.paren.open.slang.map"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.paren.close.slang.map"
        }
      },
      "contentName": "meta.statement.call.arguments.slang.map",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "comment": "call argument assignment",
          "begin": "([^=]+?)\\s*(=)",
          "end": "((?=\\))|,|$)",
          "beginCaptures": {
            "1": {
              "name": "variable.other.slang.map",
              "patterns": [
                {
                  "include": "#string"
                },
                {
                  "include": "#operator"
                }
              ]
            },
            "2": {
              "name": "keyword.operator.equals.slang.map"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.operator.comma.slang.map"
            }
          },
          "contentName": "meta.expression.jessie.slang.map",
          "patterns": [
            {
              "include": "#jessie"
            }
          ]
        }
      ]
    },
    "inline-call-statement": {
      "begin": "\\b(call)\\b",
      "end": "(?<=\\))",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.call.slang.map"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.paren.close.slang.map"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#condition-atom"
        },
        {
          "include": "#iteration-atom"
        },
        {
          "include": "#call-statement-head"
        }
      ]
    },
    "call-statement": {
      "begin": "\\b(call)\\s+",
      "end": "}",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.call.slang.map"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.brace.close.slang.map"
        }
      },
      "patterns": [
        {
          "include": "#condition-atom"
        },
        {
          "include": "#iteration-atom"
        },
        {
          "include": "#call-statement-head"
        },
        {
          "comment": "call statement tail block",
          "begin": "{",
          "end": "(?=})",
          "beginCaptures": {
            "0": {
              "name": "punctuation.brace.open.slang.map"
            }
          },
          "contentName": "meta.statement.call.slang.map",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#outcome-statement"
            },
            {
              "include": "#set-statement"
            },
            {
              "include": "#inline-set-statement"
            }
          ]
        }
      ]
    },
    "http-call-statement": {
      "begin": "\\b(http)\\b",
      "end": "}",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.http-call.slang.map"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.brace.close.slang.map"
        }
      },
      "patterns": [
        {
          "match": "[a-zA-Z_][a-zA-Z_0-9]*",
          "name": "constant.language.http-method.slang.map"
        },
        {
          "include": "#string"
        },
        {
          "comment": "http call statement tail block",
          "begin": "{",
          "end": "(?=})",
          "beginCaptures": {
            "0": {
              "name": "punctuation.brace.open.slang.map"
            }
          },
          "contentName": "meta.statement.http-call.slang.map",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "comment": "http call security scheme",
              "patterns": [
                {
                  "match": "\\b(security)\\s+(none|basic|bearer)\\b",
                  "captures": {
                    "1": {
                      "name": "keyword.other.slang.map"
                    },
                    "2": {
                      "name": "constant.language.security-scheme.slang.map"
                    }
                  }
                },
                {
                  "begin": "\\b(security)\\s+(apikey)\\s+(header|query)\\s*({)",
                  "end": "}",
                  "beginCaptures": {
                    "1": {
                      "name": "keyword.other.slang.map"
                    },
                    "2": {
                      "name": "constant.language.security-scheme.slang.map"
                    },
                    "3": {
                      "name": "constant.language.security-scheme.apikey.placement.slang.map"
                    },
                    "4": {
                      "name": "punctuation.brace.open.slang.map"
                    }
                  },
                  "endCaptures": {
                    "0": {
                      "name": "punctuation.brace.close.slang.map"
                    }
                  },
                  "contentName": "meta.statement.http-call.security.apikey.slang.map",
                  "patterns": [
                    {
                      "include": "#comment"
                    },
                    {
                      "begin": "\\b(name)\\s+(=)\\s+",
                      "end": "(?=})",
                      "beginCaptures": {
                        "2": {
                          "name": "keyword.operator.equals.slang.map"
                        }
                      },
                      "patterns": [
                        {
                          "include": "#string"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "comment": "http call request slot",
              "begin": "\\b(request)\\b",
              "end": "}",
              "beginCaptures": {
                "1": {
                  "name": "keyword.other.slang.map"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.brace.close.slang.map"
                }
              },
              "patterns": [
                {
                  "include": "#string"
                },
                {
                  "begin": "{",
                  "end": "(?=})",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.brace.open.slang.map"
                    }
                  },
                  "contentName": "meta.statement.http-call.request.slang.map",
                  "patterns": [
                    {
                      "include": "#comment"
                    },
                    {
                      "comment": "query slot",
                      "begin": "\\b(query)\\b",
                      "end": "(?<=})",
                      "beginCaptures": {
                        "1": {
                          "name": "variable.language.query.slang.map"
                        }
                      },
                      "patterns": [
                        {
                          "include": "#object-literal"
                        }
                      ]
                    },
                    {
                      "comment": "headers slot",
                      "begin": "\\b(headers)\\b",
                      "end": "(?<=})",
                      "beginCaptures": {
                        "1": {
                          "name": "variable.language.headers.slang.map"
                        }
                      },
                      "patterns": [
                        {
                          "include": "#object-literal"
                        }
                      ]
                    },
                    {
                      "comment": "body slot",
                      "patterns": [
                        {
                          "begin": "\\b(body)\\s*(=)\\s*",
                          "end": "(?=})",
                          "beginCaptures": {
                            "1": {
                              "name": "variable.language.body.slang.map"
                            },
                            "2": {
                              "name": "keyword.operator.equals.slang.map"
                            }
                          },
                          "contentName": "meta.expression.jessie.slang.map",
                          "patterns": [
                            {
                              "include": "#inline-call-statement"
                            },
                            {
                              "include": "#jessie"
                            }
                          ]
                        },
                        {
                          "begin": "\\b(body)\\s+",
                          "end": "(?<=})",
                          "beginCaptures": {
                            "1": {
                              "name": "variable.language.body.slang.map"
                            }
                          },
                          "patterns": [
                            {
                              "include": "#object-literal"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "comment": "http call response slot",
              "begin": "\\b(response)\\b",
              "end": "}",
              "beginCaptures": {
                "1": {
                  "name": "keyword.other.slang.map"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.brace.close.slang.map"
                }
              },
              "patterns": [
                {
                  "include": "#number"
                },
                {
                  "include": "#string"
                },
                {
                  "begin": "{",
                  "end": "(?=})",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.brace.open.slang.map"
                    }
                  },
                  "contentName": "meta.statement.http-call.response.slang.map",
                  "patterns": [
                    {
                      "include": "#comment"
                    },
                    {
                      "include": "#outcome-statement"
                    },
                    {
                      "include": "#set-statement"
                    },
                    {
                      "include": "#inline-set-statement"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "map-definition": {
      "begin": "\\b(map)\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*({)",
      "end": "}",
      "beginCaptures": {
        "1": {
          "name": "storage.type.map.slang.map"
        },
        "2": {
          "name": "entity.name.type.slang.map"
        },
        "3": {
          "name": "punctuation.brace.open.slang.map"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.brace.close.slang.map"
        }
      },
      "contentName": "meta.definition.map.slang.map",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#call-statement"
        },
        {
          "include": "#http-call-statement"
        },
        {
          "include": "#outcome-statement"
        },
        {
          "include": "#set-statement"
        },
        {
          "include": "#inline-set-statement"
        }
      ]
    },
    "operation-definition": {
      "begin": "\\b(operation)\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*({)",
      "end": "}",
      "beginCaptures": {
        "1": {
          "name": "storage.type.operation.slang.map"
        },
        "2": {
          "name": "entity.name.function.slang.map"
        },
        "3": {
          "name": "punctuation.brace.open.slang.map"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.brace.close.slang.map"
        }
      },
      "contentName": "meta.definition.operation.slang.map",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#call-statement"
        },
        {
          "include": "#http-call-statement"
        },
        {
          "include": "#outcome-statement"
        },
        {
          "include": "#set-statement"
        },
        {
          "include": "#inline-set-statement"
        }
      ]
    }
  }
}